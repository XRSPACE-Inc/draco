name: Draco Unity library CI

on:
  # Trigger the workflow on pull request,
  # but only for the main branch
  pull_request:
    branches:
      - main
  # Also trigger on release created events
  release:
    types:
      - created
  workflow_dispatch:

env:
  # Emscripten version that comes with Unity 2021.2
  EM_VERSION: 2.0.19
  EM_CACHE_FOLDER: 'emsdk-cache'
  # Emscripten version that comes with older Unity versions
  EM_LEGACY_VERSION: 1.38.48-fastcomp
  EM_LEGACY_CACHE_FOLDER: 'emsdk-legacy-cache'

jobs:

  mac:

    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v2

    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - uses: seanmiddleditch/gha-setup-ninja@v3

    - name: configure_mac
      # ARCHS_STANDARD explicitely enables Apple silicon on Xcode 12.2
      run: >
        cmake . -G Ninja -B build_mac
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_mac_dracodec_unity
      run: cmake --build build_mac --config MinSizeRel --target dracodec_unity
    - name: build_mac_dracoenc_unity
      run: cmake --build build_mac --config MinSizeRel --target dracoenc_unity

    - name: configure_ios
      run: >
        cmake . -G Xcode -B build_ios
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DCMAKE_SYSTEM_NAME=iOS
        -DCMAKE_OSX_ARCHITECTURES=armv7\;armv7s\;arm64
        -DCMAKE_OSX_DEPLOYMENT_TARGET=10.0
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_ios
      run: cmake --build build_ios --config MinSizeRel --target dracodec_unity

    - name: package Apple
      run: |
        mkdir draco_apple
        mkdir draco_apple/x86_64
        mv build_mac/dracodec_unity.bundle draco_apple/x86_64
        mv build_mac/dracoenc_unity.bundle draco_apple/x86_64
        mkdir draco_apple/iOS
        mv build_ios/MinSizeRel-iphoneos/libdracodec_unity.a draco_apple/iOS
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: draco_apple
        path: draco_apple


  windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: configure_win64
      run: >
        cmake . -G "Visual Studio 16 2019" -A x64 -B build_win_64
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_win64_dracodec_unity
      run: >
        cmake --build build_win_64
        --config MinSizeRel
        --target dracodec_unity
    - name: build_win64_dracoenc_unity
      run: >
        cmake --build build_win_64
        --config MinSizeRel
        --target dracoenc_unity

    - name: configure_win32
      run: >
        cmake . -G "Visual Studio 16 2019" -A Win32 -B build_win_32
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_win32
      run: cmake --build build_win_32 --config MinSizeRel --target dracodec_unity

    # Universal Windows Platform
    - name: configure_uwp_arm
      run: >
        cmake . -G "Visual Studio 16 2019" -A ARM -B build_uwp_arm
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
        -DCMAKE_SYSTEM_NAME:String=WindowsStore
        -DCMAKE_SYSTEM_VERSION:String="10.0"
    - name: build_uwp_arm
      run: >
        cmake --build build_uwp_arm
        --config MinSizeRel
        --target dracodec_unity

    - name: configure_uwp_arm64
      run: >
        cmake . -G "Visual Studio 16 2019" -A ARM64 -B build_uwp_arm64
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
        -DCMAKE_SYSTEM_NAME:String=WindowsStore
        -DCMAKE_SYSTEM_VERSION:String="10.0"
    - name: build_uwp_arm64
      run: >
        cmake --build build_uwp_arm64
        --config MinSizeRel
        --target dracodec_unity

    - name: configure_uwp_x86
      run: >
        cmake . -G "Visual Studio 16 2019" -A Win32 -B build_uwp_x86
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
        -DCMAKE_SYSTEM_NAME:String=WindowsStore
        -DCMAKE_SYSTEM_VERSION:String="10.0"
    - name: build_uwp_x86
      run: >
        cmake --build build_uwp_x86
        --config MinSizeRel
        --target dracodec_unity

    - name: configure_uwp_x64
      run: >
        cmake . -G "Visual Studio 16 2019" -A x64 -B build_uwp_x64
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
        -DCMAKE_SYSTEM_NAME:String=WindowsStore
        -DCMAKE_SYSTEM_VERSION:String="10.0"
    - name: build_uwp_x64
      run: >
        cmake --build build_uwp_x64
        --config MinSizeRel
        --target dracodec_unity

    - name: package Windows
      run: |
        mkdir draco_win/x86
        mkdir draco_win/x86_64
        mkdir draco_win/WSA/ARM
        mkdir draco_win/WSA/ARM64
        mkdir draco_win/WSA/x86
        mkdir draco_win/WSA/x64
        mv build_win_32\MinSizeRel\dracodec_unity.dll draco_win/x86
        mv build_win_64\MinSizeRel\dracodec_unity.dll draco_win/x86_64
        mv build_win_64\MinSizeRel\dracoenc_unity.dll draco_win/x86_64
        mv build_uwp_arm\MinSizeRel\dracodec_unity.dll draco_win/WSA/ARM
        mv build_uwp_arm64\MinSizeRel\dracodec_unity.dll draco_win/WSA/ARM64
        mv build_uwp_x86\MinSizeRel\dracodec_unity.dll draco_win/WSA/x86
        mv build_uwp_x64\MinSizeRel\dracodec_unity.dll draco_win/WSA/x64
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: draco_win
        path: draco_win


  linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup cache
      id: cache-system-libraries
      uses: actions/cache@v2
      with:
        path: ${{env.EM_CACHE_FOLDER}}
        key: ${{env.EM_VERSION}}-${{ runner.os }}
    - uses: seanmiddleditch/gha-setup-ninja@v3

    # Android
    - name: install Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e
        add-to-path: false

    - name: configure_android_arm64-v8a
      run: >
        cmake -B build_android_arm64-v8a -DANDROID_ABI=arm64-v8a
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}
        -DCMAKE_TOOLCHAIN_FILE="${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake"
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_android_arm64-v8a
      run: cmake --build build_android_arm64-v8a --target dracodec_unity -j

    - name: configure_android_armeabi-v7a
      run: >
        cmake -B build_android_armeabi-v7a -DANDROID_ABI=armeabi-v7a
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}
        -DCMAKE_TOOLCHAIN_FILE="${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake"
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_android_armeabi-v7a
      run: cmake --build build_android_armeabi-v7a --target dracodec_unity -j

    - name: configure_android_x86
      run: >
        cmake -B build_android_x86
        -DANDROID_ABI=x86
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}
        -DCMAKE_TOOLCHAIN_FILE="${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake"
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_android_x86
      run: cmake --build build_android_x86 --target dracodec_unity -j

    # Emscripten
    - name: setup Emscripten
      uses: mymindstorm/setup-emsdk@v10
      with:
        version: ${{env.EM_VERSION}}
        actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
    - name: configure WebAssembly
      run: >
        emcmake cmake -B build_web
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DDRACO_JS_GLUE=OFF
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build WebAssembly
      run: cmake --build build_web --target dracodec_unity -j

    # Linux artifacts
    - name: package Linux
      run: |
        mkdir -p draco_linux/WebGL
        mv build_web/libdracodec_unity.a draco_linux/WebGL
        mkdir -p draco_linux/Android/libs/arm64-v8a
        mkdir -p draco_linux/Android/libs/armeabi-v7a
        mkdir -p draco_linux/Android/libs/x86
        mv build_android_arm64-v8a/libdracodec_unity.so \
          draco_linux/Android/libs/arm64-v8a
        mv build_android_armeabi-v7a/libdracodec_unity.so \
          draco_linux/Android/libs/armeabi-v7a
        mv build_android_x86/libdracodec_unity.so \
          draco_linux/Android/libs/x86
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: draco_linux
        path: draco_linux

  linux_legacy:

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: Setup cache
      id: cache-system-libraries
      uses: actions/cache@v2
      with:
        path: ${{env.EM_LEGACY_CACHE_FOLDER}}
        key: ${{env.EM_LEGACY_VERSION}}-${{ runner.os }}

    # CMake that comes with Ubuntu 18.04 is too old, so install a recent version here
    - name: Get latest CMake and ninja
      uses: lukka/get-cmake@latest

    # Linux 64
    - name: configure_linux64
      run: >
        cmake . -G Ninja -B build_linux_64
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build_linux64_dracodec_unity
      run: cmake --build build_linux_64 --target dracodec_unity -j
    - name: build_linux64_dracoenc_unity
      run: cmake --build build_linux_64 --target dracoenc_unity -j

    # Emscripten legacy
    - name: setup Emscripten legacy
      uses: mymindstorm/setup-emsdk@v10
      with:
        version: ${{env.EM_LEGACY_VERSION}}
        actions-cache-folder: ${{env.EM_LEGACY_CACHE_FOLDER}}
    - name: configure WebAssembly legacy
      run: >
        emcmake cmake -B build_web_legacy
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=1
        -DDRACO_JS_GLUE=OFF
        -DDRACO_UNITY_PLUGIN=ON
        -DDRACO_GLTF=ON
        -DDRACO_BACKWARDS_COMPATIBILITY=OFF
    - name: build WebAssembly legacy
      run: cmake --build build_web_legacy --target dracodec_unity -j

    # Linux legacy artifacts
    - name: package Linux legacy
      run: |
        mkdir -p draco_linux_legacy/x86_64
        mv build_linux_64/libdracodec_unity.so draco_linux_legacy/x86_64
        mv build_linux_64/libdracoenc_unity.so draco_linux_legacy/x86_64
        mkdir -p draco_linux_legacy/WebGL
        mv build_web_legacy/libdracodec_unity.bc draco_linux_legacy/WebGL
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: draco_linux_legacy
        path: draco_linux_legacy



  combine:
    name: combine artifacts
    runs-on: ubuntu-latest
    needs: [mac, windows, linux, linux_legacy]
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts
      - name: combine
        run: |
          mkdir draco
          cp -r artifacts/draco_apple/* draco
          cp -r artifacts/draco_win/* draco
          cp -r artifacts/draco_linux/* draco
          cp -r artifacts/draco_linux_legacy/* draco
      - name: zip
        run: zip -r draco.zip draco
      - name: upload release assets
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          files: draco.zip
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: draco
          path: draco
      - name: delete obsolete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            draco_apple
            draco_win
            draco_linux
            draco_linux_legacy
